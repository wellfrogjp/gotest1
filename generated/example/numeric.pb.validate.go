// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: validate/numeric.proto

package example

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Numerics with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Numerics) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Numerics with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NumericsMultiError, or nil
// if none found.
func (m *Numerics) ValidateAll() error {
	return m.validate(true)
}

func (m *Numerics) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetX1() != 1.23 {
		err := NumericsValidationError{
			field:  "X1",
			reason: "value must equal 1.23",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetX2() >= 10 {
		err := NumericsValidationError{
			field:  "X2",
			reason: "value must be less than 10",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetX3() < 20 {
		err := NumericsValidationError{
			field:  "X3",
			reason: "value must be greater than or equal to 20",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetX4(); val < 30 || val >= 40 {
		err := NumericsValidationError{
			field:  "X4",
			reason: "value must be inside range [30, 40)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetX5(); val >= 30 && val < 40 {
		err := NumericsValidationError{
			field:  "X5",
			reason: "value must be outside range [30, 40)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _Numerics_X6_InLookup[m.GetX6()]; !ok {
		err := NumericsValidationError{
			field:  "X6",
			reason: "value must be in list [1 2 3]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _Numerics_X7_NotInLookup[m.GetX7()]; ok {
		err := NumericsValidationError{
			field:  "X7",
			reason: "value must not be in list [0 0.99]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetX8() != 0 {

		if m.GetX8() < 200 {
			err := NumericsValidationError{
				field:  "X8",
				reason: "value must be greater than or equal to 200",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return NumericsMultiError(errors)
	}

	return nil
}

// NumericsMultiError is an error wrapping multiple validation errors returned
// by Numerics.ValidateAll() if the designated constraints aren't met.
type NumericsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NumericsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NumericsMultiError) AllErrors() []error { return m }

// NumericsValidationError is the validation error returned by
// Numerics.Validate if the designated constraints aren't met.
type NumericsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NumericsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NumericsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NumericsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NumericsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NumericsValidationError) ErrorName() string { return "NumericsValidationError" }

// Error satisfies the builtin error interface
func (e NumericsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNumerics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NumericsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NumericsValidationError{}

var _Numerics_X6_InLookup = map[uint32]struct{}{
	1: {},
	2: {},
	3: {},
}

var _Numerics_X7_NotInLookup = map[float32]struct{}{
	0:    {},
	0.99: {},
}
